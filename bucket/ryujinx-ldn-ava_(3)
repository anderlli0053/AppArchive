{
  "version": "1.1.0-ldn3.1.3",
  "description": "A simple, experimental Nintendo Switch emulator.  The LDN edition adds multiplayer support (Avalonia UI test build)",
  "homepage": "https://ryujinx.org/",
  "license": "MIT",
  "notes": [
    "ATTENTION: Ryujinx requires Nintendo Switch firmware and a prod.keys file to function.",
    "Learn more at https://github.com/Ryujinx/Ryujinx/wiki/Ryujinx-Setup-&-Configuration-Guide"
  ],
  "architecture": {
    "64bit": {
      "url": "https://www.patreon.com/file?h=74910544&i=13368547",
      "hash": "bb34730893d0dec51e85489fa5d7c08025c5024170fd9d9cb5db756526353afc"
    }
  },
  "extract_dir": "publish",
  "bin": [
    [
      "Ryujinx Ava.exe",
      "Ryujinx LDN (Avalonia UI)"
    ]
  ],
  "shortcuts": [
    [
      "Ryujinx Ava.exe",
      "Ryujinx LDN (Avalonia UI)"
    ]
  ],
  "pre_install": [
    "if (!(Test-Path \"$persist_dir\")) {",
    "   New-Item \"$persist_dir\\portable\" -ItemType Directory | Out-Null",
    "   if (Test-Path \"$env:APPDATA\\Ryujinx\") {",
    "       Write-host \"Migrating AppData...\" -ForegroundColor yellow",
    "       Copy-Item -Path \"$env:APPDATA\\Ryujinx\\*\" -Destination \"$persist_dir\\portable\" -Recurse",
    "       Remove-Item -Path \"$env:APPDATA\\Ryujinx\" -Recurse",
    "   }",
    "}"
  ],
  "persist": "portable",
  "checkver": {
    "script": [
      "$url = 'https://github.com/Ryujinx/Ryujinx/wiki/Multiplayer-(LDN-Local-Wireless)-Guide'",
      "$fileMatch = 'Link--primary.*Windows: https://www.patreon.com/([^<]*)<'",
      "$avaMatch = 'Link--primary.*Windows.*Avalonia.*: https://www.patreon.com/([^<]*)<'",
      "$verMatch = 'Link--primary.*Download LDN (.*) here'",
      "$cont = (Invoke-WebRequest $url -UseBasicParsing).Content",
      "if(!($cont -match $fileMatch)) { error \"Could not match windows dl url '$fileMatch' on '$url'\"; break }",
      "$fileUrl = $matches[1]",
      "$fileUrl = $fileUrl.Replace('&amp;', '&')",
      "if(!($cont -match $avaMatch)) { error \"Could match ava ui build dl url '$avaMatch' on '$url'\"; break }",
      "$avaUrl = $matches[1]",
      "$avaUrl = $avaUrl.Replace('&amp;', '&')",
      "if(!($cont -match $verMatch)) { error \"Could match '$verMatch' on '$url'\"; break }",
      "$version = $matches[1]",
      "Write-Output \"$fileUrl $avaUrl $version\""
    ],
    "regex": "^(?<file>[^ ]+) (?<ava>[^ ]+) (?<version>.*)$",
    "replace": "1.1.0-ldn${version}"
  },
  "autoupdate": {
    "architecture": {
      "64bit": {
        "url": "https://www.patreon.com/$matchAva"
      }
    }
  }
}